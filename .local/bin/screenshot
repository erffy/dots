#!/usr/bin/env bash

cursor="yes"
enableEditor="yes"
screenshotDir="$HOME/Pictures"
timestamp=$(date +%Y%m%d_%H%M%S)

mkdir -p $screenshotDir

captureInitialScreenshot() {
  [[ -n $1 ]] && sleep "$1"

  for output in $(swaymsg -t get_outputs | jq -r ".[].name"); do
    [[ -e "/tmp/$output.png" ]] && rm "/tmp/$output.png"
    grim -l 1 ${cursor:+-c} -o "$output" "/tmp/$output.png"
    swaymsg for_window "[title=\"imv(.*)$output.png\"]" move to output "$output"
    swaymsg for_window "[title=\"imv(.*)$output.png\"]" fullscreen true
    imv-wayland "/tmp/$output.png" &
  done
}

combineScreenshots() {
  local imageFiles=()
  while IFS= read -r output; do
    imageFiles+=("/tmp/$output.png")
  done < <(swaymsg -t get_outputs | jq -r ".[].name")

  cd /tmp || return
  magick +append "${imageFiles[@]}" combined_screenshot.png
}

executeScreenshot() {
  local tempFile
  tempFile=$(mktemp)
  local savedScreenshotPath="$screenshotDir/${timestamp}"

  case $2 in
  1 | 3)
    if [[ $1 == "Rectangular" ]]; then
      captureInitialScreenshot "$3"
      grim -g "$(slurp)" - >"$tempFile"
      killall imv-wayland 2>/dev/null
      swappy -f "$tempFile" | wl-copy
      rm "$tempFile"
    elif [[ $1 == "Full" ]]; then
      captureInitialScreenshot "$3"
      killall imv-wayland 2>/dev/null
      focusedOutput=$(swaymsg -t get_outputs | jq -r '.[] | select(.focused) | .name')
      swappy -f "/tmp/$focusedOutput.png" | wl-copy
    elif [[ $1 == "Active" ]]; then
      [[ -n $3 ]] && sleep "$3"
      grim -g "$(swaymsg -t get_tree | jq -r '.. | select(.focused?) | .rect | "\(.x),\(.y) \(.width)x\(.height)"')" - >"$tempFile"
      swappy -f "$tempFile" | wl-copy
      rm "$tempFile"
    fi
    ;;
  2 | 4)
    if [[ $1 == "Rectangular" ]]; then
      captureInitialScreenshot "$3"
      grim -g "$(slurp)" - >"${savedScreenshotPath}.png"
      killall imv-wayland 2>/dev/null
      swappy -f "${savedScreenshotPath}.png" -o "${savedScreenshotPath}-edited.png"
    elif [[ $1 == "Full" ]]; then
      captureInitialScreenshot "$3"
      killall imv-wayland 2>/dev/null
      focusedOutput=$(swaymsg -t get_outputs | jq -r '.[] | select(.focused) | .name')
      swappy -f "/tmp/$focusedOutput.png" -o "${savedScreenshotPath}-edited.png"
    elif [[ $1 == "Active" ]]; then
      [[ -n $3 ]] && sleep "$3"
      grim -g "$(swaymsg -t get_tree | jq -r '.. | select(.focused?) | .rect | "\(.x),\(.y) \(.width)x\(.height)"')" - >"${savedScreenshotPath}.png"
      swappy -f "${savedScreenshotPath}.png" -o "${savedScreenshotPath}-edited.png"
    fi
    ;;
  esac
}
""
case $1 in
-r | --rec)
  executeScreenshot Rectangular 1
  ;;
-f | --full)
  executeScreenshot Full 2
  ;;
-a | --active)
  executeScreenshot Active 1
  ;;
*)
  screenshotMode=$(swaynag -t wpgtheme -m Screenshot -Z Full 'echo Full' -Z Rectangular 'echo Rectangular')
  [[ -z $screenshotMode ]] && exit

  saveMode=$(swaynag -t wpgtheme -m "$screenshotMode Screenshot" -Z 'Copy' 'echo 1' -Z 'Save' 'echo 2' -Z 'Timeout and Copy' 'echo 3' -Z 'Timeout and Save' 'echo 4')
  if [[ "$saveMode" == "3" ]] || [[ "$saveMode" == "4" ]]; then
    timeoutDuration=$(swaynag -t wpgtheme -m Timeout -Z 2 'echo 2' -Z 3 'echo 3' -Z 5 'echo 5' -Z 10 'echo 10' -Z 15 'echo 15' -Z 30 'echo 30')
    [[ -z $timeoutDuration ]] && exit
  elif [[ -z $saveMode ]]; then
    exit
  fi
  executeScreenshot "$screenshotMode" "$saveMode" "$timeoutDuration"
  ;;
esac
